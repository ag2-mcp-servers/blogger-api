# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T01:04:02+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, UnsuportedSecurityStub
from fastapi import Path, Query

from models import (
    Alt,
    Blog,
    BlogList,
    BlogUserInfo,
    Comment,
    CommentList,
    FieldXgafv,
    OrderBy,
    Page,
    PageList,
    Pageviews,
    Post,
    PostList,
    PostUserInfo,
    PostUserInfosList,
    Range,
    Role1,
    SortOption,
    Status4,
    Status5,
    Status6,
    Status7,
    Status9,
    Status10,
    User,
    View,
)

app = MCPProxy(
    contact={'name': 'Google', 'url': 'https://google.com', 'x-twitter': 'youtube'},
    description='The Blogger API provides access to posts, comments and pages of a Blogger blog.',
    license={
        'name': 'Creative Commons Attribution 3.0',
        'url': 'http://creativecommons.org/licenses/by/3.0/',
    },
    termsOfService='https://developers.google.com/terms/',
    title='Blogger API',
    version='v3',
    servers=[{'url': 'https://blogger.googleapis.com/'}],
)


@app.get(
    '/v3/blogs/byurl',
    description=""" Gets a blog by url. """,
    tags=['user_blog_info', 'user_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def blogger_blogs_get_by_url(
    url: str,
    view: Optional[View] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v3/blogs/{blogId}',
    description=""" Gets a blog by id. """,
    tags=['post_management', 'post_info_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def blogger_blogs_get(
    blog_id: str = Path(..., alias='blogId'),
    max_posts: Optional[int] = Query(None, alias='maxPosts'),
    view: Optional[View] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v3/blogs/{blogId}/comments',
    description=""" Lists comments by blog. """,
    tags=['blog_operations', 'post_info_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def blogger_comments_list_by_blog(
    blog_id: str = Path(..., alias='blogId'),
    end_date: Optional[str] = Query(None, alias='endDate'),
    fetch_bodies: Optional[bool] = Query(None, alias='fetchBodies'),
    max_results: Optional[int] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    start_date: Optional[str] = Query(None, alias='startDate'),
    status: Optional[Status4] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v3/blogs/{blogId}/pages',
    description=""" Lists pages. """,
    tags=['post_info_retrieval', 'blog_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def blogger_pages_list(
    blog_id: str = Path(..., alias='blogId'),
    fetch_bodies: Optional[bool] = Query(None, alias='fetchBodies'),
    max_results: Optional[int] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    status: Optional[Status5] = None,
    view: Optional[View] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v3/blogs/{blogId}/pages',
    description=""" Inserts a page. """,
    tags=['page_management', 'blog_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def blogger_pages_insert(
    blog_id: str = Path(..., alias='blogId'),
    is_draft: Optional[bool] = Query(None, alias='isDraft'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: Page = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v3/blogs/{blogId}/pages/{pageId}',
    description=""" Deletes a page by blog id and page id. """,
    tags=['page_management', 'blog_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def blogger_pages_delete(
    blog_id: str = Path(..., alias='blogId'),
    page_id: str = Path(..., alias='pageId'),
    use_trash: Optional[bool] = Query(None, alias='useTrash'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v3/blogs/{blogId}/pages/{pageId}',
    description=""" Gets a page by blog id and page id. """,
    tags=['blog_operations', 'page_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def blogger_pages_get(
    blog_id: str = Path(..., alias='blogId'),
    page_id: str = Path(..., alias='pageId'),
    view: Optional[View] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/v3/blogs/{blogId}/pages/{pageId}',
    description=""" Patches a page. """,
    tags=['page_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def blogger_pages_patch(
    blog_id: str = Path(..., alias='blogId'),
    page_id: str = Path(..., alias='pageId'),
    publish: Optional[bool] = None,
    revert: Optional[bool] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: Page = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v3/blogs/{blogId}/pages/{pageId}',
    description=""" Updates a page by blog id and page id. """,
    tags=['blog_operations', 'page_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def blogger_pages_update(
    blog_id: str = Path(..., alias='blogId'),
    page_id: str = Path(..., alias='pageId'),
    publish: Optional[bool] = None,
    revert: Optional[bool] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: Page = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v3/blogs/{blogId}/pages/{pageId}/publish',
    description=""" Publishes a page. """,
    tags=['blog_operations', 'page_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def blogger_pages_publish(
    blog_id: str = Path(..., alias='blogId'),
    page_id: str = Path(..., alias='pageId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v3/blogs/{blogId}/pages/{pageId}/revert',
    description=""" Reverts a published or scheduled page to draft state. """,
    tags=['blog_operations', 'page_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def blogger_pages_revert(
    blog_id: str = Path(..., alias='blogId'),
    page_id: str = Path(..., alias='pageId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v3/blogs/{blogId}/pageviews',
    description=""" Gets page views by blog id. """,
    tags=['blog_operations', 'post_info_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def blogger_page_views_get(
    blog_id: str = Path(..., alias='blogId'),
    range: Optional[Range] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v3/blogs/{blogId}/posts',
    description=""" Lists posts. """,
    tags=['post_info_retrieval', 'blog_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def blogger_posts_list(
    blog_id: str = Path(..., alias='blogId'),
    end_date: Optional[str] = Query(None, alias='endDate'),
    fetch_bodies: Optional[bool] = Query(None, alias='fetchBodies'),
    fetch_images: Optional[bool] = Query(None, alias='fetchImages'),
    labels: Optional[str] = None,
    max_results: Optional[int] = Query(None, alias='maxResults'),
    order_by: Optional[OrderBy] = Query(None, alias='orderBy'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    sort_option: Optional[SortOption] = Query(None, alias='sortOption'),
    start_date: Optional[str] = Query(None, alias='startDate'),
    status: Optional[Status6] = None,
    view: Optional[View] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v3/blogs/{blogId}/posts',
    description=""" Inserts a post. """,
    tags=['post_management', 'post_info_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def blogger_posts_insert(
    blog_id: str = Path(..., alias='blogId'),
    fetch_body: Optional[bool] = Query(None, alias='fetchBody'),
    fetch_images: Optional[bool] = Query(None, alias='fetchImages'),
    is_draft: Optional[bool] = Query(None, alias='isDraft'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: Post = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v3/blogs/{blogId}/posts/bypath',
    description=""" Gets a post by path. """,
    tags=['comment_handling', 'post_info_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def blogger_posts_get_by_path(
    blog_id: str = Path(..., alias='blogId'),
    path: str = ...,
    max_comments: Optional[int] = Query(None, alias='maxComments'),
    view: Optional[View] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v3/blogs/{blogId}/posts/search',
    description=""" Searches for posts matching given query terms in the specified blog. """,
    tags=['post_info_retrieval', 'blog_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def blogger_posts_search(
    blog_id: str = Path(..., alias='blogId'),
    q: str = ...,
    fetch_bodies: Optional[bool] = Query(None, alias='fetchBodies'),
    order_by: Optional[OrderBy] = Query(None, alias='orderBy'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v3/blogs/{blogId}/posts/{postId}',
    description=""" Deletes a post by blog id and post id. """,
    tags=['post_management', 'post_info_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def blogger_posts_delete(
    blog_id: str = Path(..., alias='blogId'),
    post_id: str = Path(..., alias='postId'),
    use_trash: Optional[bool] = Query(None, alias='useTrash'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v3/blogs/{blogId}/posts/{postId}',
    description=""" Gets a post by blog id and post id """,
    tags=['post_info_retrieval', 'post_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def blogger_posts_get(
    blog_id: str = Path(..., alias='blogId'),
    post_id: str = Path(..., alias='postId'),
    fetch_body: Optional[bool] = Query(None, alias='fetchBody'),
    fetch_images: Optional[bool] = Query(None, alias='fetchImages'),
    max_comments: Optional[int] = Query(None, alias='maxComments'),
    view: Optional[View] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/v3/blogs/{blogId}/posts/{postId}',
    description=""" Patches a post. """,
    tags=['post_management', 'post_info_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def blogger_posts_patch(
    blog_id: str = Path(..., alias='blogId'),
    post_id: str = Path(..., alias='postId'),
    fetch_body: Optional[bool] = Query(None, alias='fetchBody'),
    fetch_images: Optional[bool] = Query(None, alias='fetchImages'),
    max_comments: Optional[int] = Query(None, alias='maxComments'),
    publish: Optional[bool] = None,
    revert: Optional[bool] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: Post = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v3/blogs/{blogId}/posts/{postId}',
    description=""" Updates a post by blog id and post id. """,
    tags=['post_management', 'post_info_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def blogger_posts_update(
    blog_id: str = Path(..., alias='blogId'),
    post_id: str = Path(..., alias='postId'),
    fetch_body: Optional[bool] = Query(None, alias='fetchBody'),
    fetch_images: Optional[bool] = Query(None, alias='fetchImages'),
    max_comments: Optional[int] = Query(None, alias='maxComments'),
    publish: Optional[bool] = None,
    revert: Optional[bool] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: Post = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v3/blogs/{blogId}/posts/{postId}/comments',
    description=""" Lists comments. """,
    tags=['post_management', 'post_info_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def blogger_comments_list(
    blog_id: str = Path(..., alias='blogId'),
    post_id: str = Path(..., alias='postId'),
    end_date: Optional[str] = Query(None, alias='endDate'),
    fetch_bodies: Optional[bool] = Query(None, alias='fetchBodies'),
    max_results: Optional[int] = Query(None, alias='maxResults'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    start_date: Optional[str] = Query(None, alias='startDate'),
    status: Optional[Status7] = None,
    view: Optional[View] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v3/blogs/{blogId}/posts/{postId}/comments/{commentId}',
    description=""" Deletes a comment by blog id, post id and comment id. """,
    tags=['comment_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def blogger_comments_delete(
    blog_id: str = Path(..., alias='blogId'),
    post_id: str = Path(..., alias='postId'),
    comment_id: str = Path(..., alias='commentId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v3/blogs/{blogId}/posts/{postId}/comments/{commentId}',
    description=""" Gets a comment by id. """,
    tags=['comment_handling', 'post_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def blogger_comments_get(
    blog_id: str = Path(..., alias='blogId'),
    post_id: str = Path(..., alias='postId'),
    comment_id: str = Path(..., alias='commentId'),
    view: Optional[View] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/approve',
    description=""" Marks a comment as not spam by blog id, post id and comment id. """,
    tags=['comment_handling', 'post_info_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def blogger_comments_approve(
    blog_id: str = Path(..., alias='blogId'),
    post_id: str = Path(..., alias='postId'),
    comment_id: str = Path(..., alias='commentId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/removecontent',
    description=""" Removes the content of a comment by blog id, post id and comment id. """,
    tags=['comment_handling', 'post_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def blogger_comments_remove_content(
    blog_id: str = Path(..., alias='blogId'),
    post_id: str = Path(..., alias='postId'),
    comment_id: str = Path(..., alias='commentId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/spam',
    description=""" Marks a comment as spam by blog id, post id and comment id. """,
    tags=['comment_handling', 'post_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def blogger_comments_mark_as_spam(
    blog_id: str = Path(..., alias='blogId'),
    post_id: str = Path(..., alias='postId'),
    comment_id: str = Path(..., alias='commentId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v3/blogs/{blogId}/posts/{postId}/publish',
    description=""" Publishes a post. """,
    tags=['post_management', 'post_info_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def blogger_posts_publish(
    blog_id: str = Path(..., alias='blogId'),
    post_id: str = Path(..., alias='postId'),
    publish_date: Optional[str] = Query(None, alias='publishDate'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v3/blogs/{blogId}/posts/{postId}/revert',
    description=""" Reverts a published or scheduled post to draft state. """,
    tags=['post_management', 'post_info_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def blogger_posts_revert(
    blog_id: str = Path(..., alias='blogId'),
    post_id: str = Path(..., alias='postId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v3/users/{userId}',
    description=""" Gets one user by user_id. """,
    tags=['user_account_management', 'user_blog_info'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def blogger_users_get(
    user_id: str = Path(..., alias='userId'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v3/users/{userId}/blogs',
    description=""" Lists blogs by user. """,
    tags=['user_account_management', 'user_blog_info'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def blogger_blogs_list_by_user(
    user_id: str = Path(..., alias='userId'),
    fetch_user_info: Optional[bool] = Query(None, alias='fetchUserInfo'),
    role: Optional[Role1] = None,
    status: Optional[Status9] = None,
    view: Optional[View] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v3/users/{userId}/blogs/{blogId}',
    description=""" Gets one blog and user info pair by blog id and user id. """,
    tags=['post_management', 'user_blog_info', 'post_info_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def blogger_blog_user_infos_get(
    user_id: str = Path(..., alias='userId'),
    blog_id: str = Path(..., alias='blogId'),
    max_posts: Optional[int] = Query(None, alias='maxPosts'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v3/users/{userId}/blogs/{blogId}/posts',
    description=""" Lists post and user info pairs. """,
    tags=['post_info_retrieval', 'user_blog_info'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def blogger_post_user_infos_list(
    user_id: str = Path(..., alias='userId'),
    blog_id: str = Path(..., alias='blogId'),
    end_date: Optional[str] = Query(None, alias='endDate'),
    fetch_bodies: Optional[bool] = Query(None, alias='fetchBodies'),
    labels: Optional[str] = None,
    max_results: Optional[int] = Query(None, alias='maxResults'),
    order_by: Optional[OrderBy] = Query(None, alias='orderBy'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    start_date: Optional[str] = Query(None, alias='startDate'),
    status: Optional[Status10] = None,
    view: Optional[View] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v3/users/{userId}/blogs/{blogId}/posts/{postId}',
    description=""" Gets one post and user info pair, by post_id and user_id. """,
    tags=['comment_handling', 'post_info_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def blogger_post_user_infos_get(
    user_id: str = Path(..., alias='userId'),
    blog_id: str = Path(..., alias='blogId'),
    post_id: str = Path(..., alias='postId'),
    max_comments: Optional[int] = Query(None, alias='maxComments'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
