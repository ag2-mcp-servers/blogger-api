# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T01:04:02+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field, RootModel


class Locale(BaseModel):
    country: Optional[str] = Field(
        None, description="The country this blog's locale is set to."
    )
    language: Optional[str] = Field(
        None, description='The language this blog is authored in.'
    )
    variant: Optional[str] = Field(
        None, description='The language variant this blog is authored in.'
    )


class Pages(BaseModel):
    selfLink: Optional[str] = Field(
        None, description='The URL of the container for pages in this blog.'
    )
    totalItems: Optional[int] = Field(
        None, description='The count of pages in this blog.'
    )


class Status(Enum):
    LIVE = 'LIVE'
    DELETED = 'DELETED'


class Role(Enum):
    VIEW_TYPE_UNSPECIFIED = 'VIEW_TYPE_UNSPECIFIED'
    READER = 'READER'
    AUTHOR = 'AUTHOR'
    ADMIN = 'ADMIN'


class BlogPerUserInfo(BaseModel):
    blogId: Optional[str] = Field(None, description='ID of the Blog resource.')
    hasAdminAccess: Optional[bool] = Field(
        None, description='True if the user has Admin level access to the blog.'
    )
    kind: Optional[str] = Field(
        None, description='The kind of this entity. Always blogger#blogPerUserInfo.'
    )
    photosAlbumKey: Optional[str] = Field(
        None,
        description='The Photo Album Key for the user when adding photos to the blog.',
    )
    role: Optional[Role] = Field(
        None,
        description='Access permissions that the user has for the blog (ADMIN, AUTHOR, or READER).',
    )
    userId: Optional[str] = Field(None, description='ID of the User.')


class Image(BaseModel):
    url: Optional[str] = Field(None, description="The creator's avatar URL.")


class Author(BaseModel):
    displayName: Optional[str] = Field(None, description='The display name.')
    id: Optional[str] = Field(None, description='The identifier of the creator.')
    image: Optional[Image] = Field(None, description="The creator's avatar.")
    url: Optional[str] = Field(
        None, description="The URL of the creator's Profile page."
    )


class Blog1(BaseModel):
    id: Optional[str] = Field(
        None, description='The identifier of the blog containing this comment.'
    )


class InReplyTo(BaseModel):
    id: Optional[str] = Field(
        None, description='The identified of the parent of this comment.'
    )


class Post1(BaseModel):
    id: Optional[str] = Field(
        None, description='The identifier of the post containing this comment.'
    )


class Status1(Enum):
    LIVE = 'LIVE'
    EMPTIED = 'EMPTIED'
    PENDING = 'PENDING'
    SPAM = 'SPAM'


class Comment(BaseModel):
    author: Optional[Author] = Field(None, description='The author of this Comment.')
    blog: Optional[Blog1] = Field(
        None, description='Data about the blog containing this comment.'
    )
    content: Optional[str] = Field(
        None, description='The actual content of the comment. May include HTML markup.'
    )
    id: Optional[str] = Field(None, description='The identifier for this resource.')
    inReplyTo: Optional[InReplyTo] = Field(
        None, description='Data about the comment this is in reply to.'
    )
    kind: Optional[str] = Field(
        None, description='The kind of this entry. Always blogger#comment.'
    )
    post: Optional[Post1] = Field(
        None, description='Data about the post containing this comment.'
    )
    published: Optional[str] = Field(
        None, description='RFC 3339 date-time when this comment was published.'
    )
    selfLink: Optional[str] = Field(
        None, description='The API REST URL to fetch this resource from.'
    )
    status: Optional[Status1] = Field(
        None, description='The status of the comment (only populated for admin users).'
    )
    updated: Optional[str] = Field(
        None, description='RFC 3339 date-time when this comment was last updated.'
    )


class CommentList(BaseModel):
    etag: Optional[str] = Field(None, description='Etag of the response.')
    items: Optional[List[Comment]] = Field(
        None, description='The List of Comments for a Post.'
    )
    kind: Optional[str] = Field(
        None, description='The kind of this entry. Always blogger#commentList.'
    )
    nextPageToken: Optional[str] = Field(
        None, description='Pagination token to fetch the next page, if one exists.'
    )
    prevPageToken: Optional[str] = Field(
        None, description='Pagination token to fetch the previous page, if one exists.'
    )


class Author1(BaseModel):
    displayName: Optional[str] = Field(None, description='The display name.')
    id: Optional[str] = Field(None, description='The identifier of the creator.')
    image: Optional[Image] = Field(None, description="The creator's avatar.")
    url: Optional[str] = Field(
        None, description="The URL of the creator's Profile page."
    )


class Blog2(BaseModel):
    id: Optional[str] = Field(
        None, description='The identifier of the blog containing this page.'
    )


class Status2(Enum):
    LIVE = 'LIVE'
    DRAFT = 'DRAFT'
    SOFT_TRASHED = 'SOFT_TRASHED'


class Page(BaseModel):
    author: Optional[Author1] = Field(None, description='The author of this Page.')
    blog: Optional[Blog2] = Field(
        None, description='Data about the blog containing this Page.'
    )
    content: Optional[str] = Field(
        None, description='The body content of this Page, in HTML.'
    )
    etag: Optional[str] = Field(None, description='Etag of the resource.')
    id: Optional[str] = Field(None, description='The identifier for this resource.')
    kind: Optional[str] = Field(
        None, description='The kind of this entity. Always blogger#page.'
    )
    published: Optional[str] = Field(
        None, description='RFC 3339 date-time when this Page was published.'
    )
    selfLink: Optional[str] = Field(
        None, description='The API REST URL to fetch this resource from.'
    )
    status: Optional[Status2] = Field(
        None,
        description='The status of the page for admin resources (either LIVE or DRAFT).',
    )
    title: Optional[str] = Field(
        None,
        description='The title of this entity. This is the name displayed in the Admin user interface.',
    )
    trashed: Optional[str] = Field(
        None, description='RFC 3339 date-time when this Page was trashed.'
    )
    updated: Optional[str] = Field(
        None, description='RFC 3339 date-time when this Page was last updated.'
    )
    url: Optional[str] = Field(
        None, description='The URL that this Page is displayed at.'
    )


class PageList(BaseModel):
    etag: Optional[str] = Field(None, description='Etag of the response.')
    items: Optional[List[Page]] = Field(
        None, description='The list of Pages for a Blog.'
    )
    kind: Optional[str] = Field(
        None, description='The kind of this entity. Always blogger#pageList.'
    )
    nextPageToken: Optional[str] = Field(
        None, description='Pagination token to fetch the next page, if one exists.'
    )


class TimeRange(Enum):
    ALL_TIME = 'ALL_TIME'
    THIRTY_DAYS = 'THIRTY_DAYS'
    SEVEN_DAYS = 'SEVEN_DAYS'


class Count(BaseModel):
    count: Optional[str] = Field(
        None, description='Count of page views for the given time range.'
    )
    timeRange: Optional[TimeRange] = Field(
        None, description='Time range the given count applies to.'
    )


class Pageviews(BaseModel):
    blogId: Optional[str] = Field(None, description='Blog Id.')
    counts: Optional[List[Count]] = Field(
        None, description='The container of posts in this blog.'
    )
    kind: Optional[str] = Field(
        None, description='The kind of this entry. Always blogger#page_views.'
    )


class Author2(BaseModel):
    displayName: Optional[str] = Field(None, description='The display name.')
    id: Optional[str] = Field(None, description='The identifier of the creator.')
    image: Optional[Image] = Field(None, description="The creator's avatar.")
    url: Optional[str] = Field(
        None, description="The URL of the creator's Profile page."
    )


class Blog3(BaseModel):
    id: Optional[str] = Field(
        None, description='The identifier of the Blog that contains this Post.'
    )


class Image3(BaseModel):
    url: Optional[str] = None


class Location(BaseModel):
    lat: Optional[float] = Field(None, description="Location's latitude.")
    lng: Optional[float] = Field(None, description="Location's longitude.")
    name: Optional[str] = Field(None, description='Location name.')
    span: Optional[str] = Field(
        None,
        description="Location's viewport span. Can be used when rendering a map preview.",
    )


class ReaderComments(Enum):
    ALLOW = 'ALLOW'
    DONT_ALLOW_SHOW_EXISTING = 'DONT_ALLOW_SHOW_EXISTING'
    DONT_ALLOW_HIDE_EXISTING = 'DONT_ALLOW_HIDE_EXISTING'


class Replies(BaseModel):
    items: Optional[List[Comment]] = Field(
        None, description='The List of Comments for this Post.'
    )
    selfLink: Optional[str] = Field(
        None, description='The URL of the comments on this post.'
    )
    totalItems: Optional[str] = Field(
        None, description='The count of comments on this post.'
    )


class Status3(Enum):
    LIVE = 'LIVE'
    DRAFT = 'DRAFT'
    SCHEDULED = 'SCHEDULED'
    SOFT_TRASHED = 'SOFT_TRASHED'


class Post(BaseModel):
    author: Optional[Author2] = Field(None, description='The author of this Post.')
    blog: Optional[Blog3] = Field(
        None, description='Data about the blog containing this Post.'
    )
    content: Optional[str] = Field(
        None, description='The content of the Post. May contain HTML markup.'
    )
    customMetaData: Optional[str] = Field(
        None, description='The JSON meta-data for the Post.'
    )
    etag: Optional[str] = Field(None, description='Etag of the resource.')
    id: Optional[str] = Field(None, description='The identifier of this Post.')
    images: Optional[List[Image3]] = Field(
        None, description='Display image for the Post.'
    )
    kind: Optional[str] = Field(
        None, description='The kind of this entity. Always blogger#post.'
    )
    labels: Optional[List[str]] = Field(
        None, description='The list of labels this Post was tagged with.'
    )
    location: Optional[Location] = Field(
        None, description='The location for geotagged posts.'
    )
    published: Optional[str] = Field(
        None, description='RFC 3339 date-time when this Post was published.'
    )
    readerComments: Optional[ReaderComments] = Field(
        None,
        description='Comment control and display setting for readers of this post.',
    )
    replies: Optional[Replies] = Field(
        None, description='The container of comments on this Post.'
    )
    selfLink: Optional[str] = Field(
        None, description='The API REST URL to fetch this resource from.'
    )
    status: Optional[Status3] = Field(
        None, description='Status of the post. Only set for admin-level requests.'
    )
    title: Optional[str] = Field(None, description='The title of the Post.')
    titleLink: Optional[str] = Field(
        None, description="The title link URL, similar to atom's related link."
    )
    trashed: Optional[str] = Field(
        None, description='RFC 3339 date-time when this Post was last trashed.'
    )
    updated: Optional[str] = Field(
        None, description='RFC 3339 date-time when this Post was last updated.'
    )
    url: Optional[str] = Field(
        None, description='The URL where this Post is displayed.'
    )


class PostList(BaseModel):
    etag: Optional[str] = Field(None, description='Etag of the response.')
    items: Optional[List[Post]] = Field(
        None, description='The list of Posts for this Blog.'
    )
    kind: Optional[str] = Field(
        None, description='The kind of this entity. Always blogger#postList.'
    )
    nextPageToken: Optional[str] = Field(
        None, description='Pagination token to fetch the next page, if one exists.'
    )
    prevPageToken: Optional[str] = Field(
        None, description='Pagination token to fetch the previous page, if one exists.'
    )


class PostPerUserInfo(BaseModel):
    blogId: Optional[str] = Field(
        None, description='ID of the Blog that the post resource belongs to.'
    )
    hasEditAccess: Optional[bool] = Field(
        None, description='True if the user has Author level access to the post.'
    )
    kind: Optional[str] = Field(
        None, description='The kind of this entity. Always blogger#postPerUserInfo.'
    )
    postId: Optional[str] = Field(None, description='ID of the Post resource.')
    userId: Optional[str] = Field(None, description='ID of the User.')


class PostUserInfo(BaseModel):
    kind: Optional[str] = Field(
        None, description='The kind of this entity. Always blogger#postUserInfo.'
    )
    post: Optional[Post] = Field(None, description='The Post resource.')
    post_user_info: Optional[PostPerUserInfo] = Field(
        None, description='Information about a User for the Post.'
    )


class PostUserInfosList(BaseModel):
    items: Optional[List[PostUserInfo]] = Field(
        None,
        description='The list of Posts with User information for the post, for this Blog.',
    )
    kind: Optional[str] = Field(
        None, description='The kind of this entity. Always blogger#postList.'
    )
    nextPageToken: Optional[str] = Field(
        None, description='Pagination token to fetch the next page, if one exists.'
    )


class Blogs(BaseModel):
    selfLink: Optional[str] = Field(
        None, description='The URL of the Blogs for this user.'
    )


class User(BaseModel):
    about: Optional[str] = Field(None, description='Profile summary information.')
    blogs: Optional[Blogs] = Field(
        None, description='The container of blogs for this user.'
    )
    created: Optional[str] = Field(
        None,
        description='The timestamp of when this profile was created, in seconds since epoch.',
    )
    displayName: Optional[str] = Field(None, description='The display name.')
    id: Optional[str] = Field(None, description='The identifier for this User.')
    kind: Optional[str] = Field(
        None, description='The kind of this entity. Always blogger#user.'
    )
    locale: Optional[Locale] = Field(None, description="This user's locale")
    selfLink: Optional[str] = Field(
        None, description='The API REST URL to fetch this resource from.'
    )
    url: Optional[str] = Field(None, description="The user's profile page.")


class View(Enum):
    VIEW_TYPE_UNSPECIFIED = 'VIEW_TYPE_UNSPECIFIED'
    READER = 'READER'
    AUTHOR = 'AUTHOR'
    ADMIN = 'ADMIN'


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class StatusEnum(Enum):
    LIVE = 'LIVE'
    EMPTIED = 'EMPTIED'
    PENDING = 'PENDING'
    SPAM = 'SPAM'


class Status4(RootModel[List[StatusEnum]]):
    root: List[StatusEnum]


class StatusEnum2(Enum):
    LIVE = 'LIVE'
    DRAFT = 'DRAFT'
    SOFT_TRASHED = 'SOFT_TRASHED'


class Status5(RootModel[List[StatusEnum2]]):
    root: List[StatusEnum2]


class RangeEnum(Enum):
    all = 'all'
    field_30DAYS = '30DAYS'
    field_7DAYS = '7DAYS'


class Range(RootModel[List[RangeEnum]]):
    root: List[RangeEnum]


class OrderBy(Enum):
    ORDER_BY_UNSPECIFIED = 'ORDER_BY_UNSPECIFIED'
    PUBLISHED = 'PUBLISHED'
    UPDATED = 'UPDATED'


class SortOption(Enum):
    SORT_OPTION_UNSPECIFIED = 'SORT_OPTION_UNSPECIFIED'
    DESCENDING = 'DESCENDING'
    ASCENDING = 'ASCENDING'


class StatusEnum4(Enum):
    LIVE = 'LIVE'
    DRAFT = 'DRAFT'
    SCHEDULED = 'SCHEDULED'
    SOFT_TRASHED = 'SOFT_TRASHED'


class Status6(RootModel[List[StatusEnum4]]):
    root: List[StatusEnum4]


class Status7(Enum):
    LIVE = 'LIVE'
    EMPTIED = 'EMPTIED'
    PENDING = 'PENDING'
    SPAM = 'SPAM'


class RoleEnum(Enum):
    VIEW_TYPE_UNSPECIFIED = 'VIEW_TYPE_UNSPECIFIED'
    READER = 'READER'
    AUTHOR = 'AUTHOR'
    ADMIN = 'ADMIN'


class StatusEnum6(Enum):
    LIVE = 'LIVE'
    DELETED = 'DELETED'


class Role1(RootModel[List[RoleEnum]]):
    root: List[RoleEnum]


class Status9(RootModel[List[StatusEnum6]]):
    root: List[StatusEnum6]


class StatusEnum8(Enum):
    LIVE = 'LIVE'
    DRAFT = 'DRAFT'
    SCHEDULED = 'SCHEDULED'
    SOFT_TRASHED = 'SOFT_TRASHED'


class Status10(RootModel[List[StatusEnum8]]):
    root: List[StatusEnum8]


class Posts(BaseModel):
    items: Optional[List[Post]] = Field(
        None, description='The List of Posts for this Blog.'
    )
    selfLink: Optional[str] = Field(
        None, description='The URL of the container for posts in this blog.'
    )
    totalItems: Optional[int] = Field(
        None, description='The count of posts in this blog.'
    )


class Blog(BaseModel):
    customMetaData: Optional[str] = Field(
        None, description='The JSON custom meta-data for the Blog.'
    )
    description: Optional[str] = Field(
        None,
        description='The description of this blog. This is displayed underneath the title.',
    )
    id: Optional[str] = Field(None, description='The identifier for this resource.')
    kind: Optional[str] = Field(
        None, description='The kind of this entry. Always blogger#blog.'
    )
    locale: Optional[Locale] = Field(
        None, description='The locale this Blog is set to.'
    )
    name: Optional[str] = Field(
        None, description='The name of this blog. This is displayed as the title.'
    )
    pages: Optional[Pages] = Field(
        None, description='The container of pages in this blog.'
    )
    posts: Optional[Posts] = Field(
        None, description='The container of posts in this blog.'
    )
    published: Optional[str] = Field(
        None, description='RFC 3339 date-time when this blog was published.'
    )
    selfLink: Optional[str] = Field(
        None, description='The API REST URL to fetch this resource from.'
    )
    status: Optional[Status] = Field(None, description='The status of the blog.')
    updated: Optional[str] = Field(
        None, description='RFC 3339 date-time when this blog was last updated.'
    )
    url: Optional[str] = Field(
        None, description='The URL where this blog is published.'
    )


class BlogUserInfo(BaseModel):
    blog: Optional[Blog] = Field(None, description='The Blog resource.')
    blog_user_info: Optional[BlogPerUserInfo] = Field(
        None, description='Information about a User for the Blog.'
    )
    kind: Optional[str] = Field(
        None, description='The kind of this entity. Always blogger#blogUserInfo.'
    )


class BlogList(BaseModel):
    blogUserInfos: Optional[List[BlogUserInfo]] = Field(
        None, description='Admin level list of blog per-user information.'
    )
    items: Optional[List[Blog]] = Field(
        None,
        description='The list of Blogs this user has Authorship or Admin rights over.',
    )
    kind: Optional[str] = Field(
        None, description='The kind of this entity. Always blogger#blogList.'
    )
